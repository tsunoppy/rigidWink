#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# generated by wxGlade 0.9.6 on Thu Oct 29 22:41:10 2020
#

import numpy, matplotlib
if matplotlib.__version__ < '2.2':
    raise ValueError("Minimum Matplotlib version required: 2.2")
#
from matplotlib.figure import Figure
from matplotlib.backends.backend_wxagg import FigureCanvasWxAgg as FigureCanvas

import wx
import os
#from shutil import make_archive

# read from glade
import gui
# read from main solver
import rigidWink

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

class MyFrame(gui.MyFrame):


    # Sample Data Loading
    def OnSample(self,event):

        xx1 = []
        xx2 = []
        yy1 = []
        yy2 = []
        ndimx = []
        ndimy = []
        kb = []

        # make sample model
        xx1.append(0.0)
        xx2.append(100.0)
        yy1.append(0.0)
        yy2.append(30.0)
        ndimx.append(100)
        ndimy.append(30)
        kb.append(50000.0)

        xx1.append(0.0)
        xx2.append(50.0)
        yy1.append(30.0)
        yy2.append(60.0)
        ndimx.append(50)
        ndimy.append(30)
        kb.append(50000.0)

        for i in range(0,len(xx1)):
            self.grid_model.SetCellValue(i,0,str(xx1[i]))
            self.grid_model.SetCellValue(i,1,str(xx2[i]))
            self.grid_model.SetCellValue(i,2,str(yy1[i]))
            self.grid_model.SetCellValue(i,3,str(yy2[i]))
            self.grid_model.SetCellValue(i,4,str(ndimx[i]))
            self.grid_model.SetCellValue(i,5,str(ndimy[i]))
            self.grid_model.SetCellValue(i,6,str(kb[i]))

        # make load data
        case = []
        nn = [] # Axial Force, kN
        mmx = [] # Over Turning Moment, kN.m
        mmy = [] # Over Turning Moment, kN.m
        case.append("L")
        nn.append(1400000.0)
        mmx.append(0.0)
        mmy.append(5000000.0)
        case.append("L1X")
        nn.append(0.0)
        mmx.append(10000000.0)
        mmy.append(0.0)
        case.append("L1Y")
        nn.append(0.0)
        mmx.append(0.0)
        mmy.append(10000000.0)
        for i in range(0,len(case)):
            self.grid_load.SetCellValue(i,0,case[i])
            self.grid_load.SetCellValue(i,1,str(nn[i]))
            self.grid_load.SetCellValue(i,2,str(mmx[i]))
            self.grid_load.SetCellValue(i,3,str(mmy[i]))

        # make compb data
        label = []
        fac1  = []
        case1 = []
        fac2  = []
        case2 = []
        fac3  = []
        case3 = []
        fac4  = []
        case4 = []
        #
        label.append("L/Permanent")
        case1.append("L")
        fac1.append(1.0)
        case2.append("")
        fac2.append("")
        case3.append("")
        fac3.append("")
        case4.append("")
        fac4.append("")
        #
        label.append("L1_X+")
        case1.append("L")
        fac1.append(1.0)
        case2.append("L1X")
        fac2.append(1.0)
        case3.append("")
        fac3.append("")
        case4.append("")
        fac4.append("")
        #
        label.append("L1_45+")
        case1.append("L")
        fac1.append(1.0)
        case2.append("L1X")
        fac2.append(1.0)
        case3.append("L1Y")
        fac3.append(1.0)
        case4.append("")
        fac4.append("")

        for i in range(0,len(label)):
            self.grid_comb.SetCellValue(i,0,label[i])
            self.grid_comb.SetCellValue(i,1,case1[i])
            self.grid_comb.SetCellValue(i,2,str(fac1[i]))
            self.grid_comb.SetCellValue(i,3,case2[i])
            self.grid_comb.SetCellValue(i,4,str(fac2[i]))
            self.grid_comb.SetCellValue(i,5,case3[i])
            self.grid_comb.SetCellValue(i,6,str(fac3[i]))
            self.grid_comb.SetCellValue(i,7,case4[i])
            self.grid_comb.SetCellValue(i,8,str(fac4[i]))

    # Import Read xlsx sheet
    ########################################################################
    def OnChooseTargetFile(self, event):  # wxGlade: MyFrame.<event_handler>
        pathname = self.showFileDialog()
        self.text_ctrl_1.SetValue(pathname)

    def OnChooseOutputFile(self, event):  # wxGlade: MyFrame.<event_handler>
        pathname = self.showFileDialog()
        self.text_ctrl_2.SetValue(pathname)

    def showFileDialog(self):
        with wx.FileDialog(self, 'Pls, select File',
                          style=wx.DD_DEFAULT_STYLE
                                | wx.DD_DIR_MUST_EXIST
                                | wx.DD_CHANGE_DIR
                          ) as dialog:
            if dialog.ShowModal() == wx.ID_CANCEL:
                return
            return dialog.GetPath()

    def OnCancel(self, event):  # wxGlade: MyFrame.<event_handler>
        self.Destroy()

    def OnAbout(self,event):
        comment = 'Welcome to rigid wink!!'
        dlg = wx.MessageDialog(self, 'MIT Licence',
                               'Coded by Tsunoppy',
                               wx.OK | wx.ICON_INFORMATION
                               )
        dlg.ShowModal()
        dlg.Destroy()

    def OnPre(self,event):

        index = self.text_ctrl_index.GetValue()
        index = int(index)-1
        num = self.text_ctrl_total.GetValue()
        num = int(num)
        if index < 0:
            index = int(num)
            self.text_ctrl_index.SetValue(str(index))
        else:
            self.text_ctrl_index.SetValue(str(index))

        # Stress
        data = "db/result_" + str(index) + ".png"
        image = wx.Image(data)
        image = image.Scale(680,480,wx.IMAGE_QUALITY_HIGH)
        bitmap = image.ConvertToBitmap()
        wx.StaticBitmap(self.panel_stress, -1, bitmap, pos=(0,0) )
        # Uplift
        data = "db/uplift_" + str(index) + ".png"
        image = wx.Image(data)
        image = image.Scale(680,480,wx.IMAGE_QUALITY_HIGH)
        bitmap = image.ConvertToBitmap()
        wx.StaticBitmap(self.panel_uplift, -1, bitmap, pos=(0,0) )

        # Summary テキストデータを表示
        data = "db/result_" + str(index) + ".txt"
        f = open(data,'r')
        line = f.read()
        f.close()
        #self.text_ctrl_result.AppendText(line)
        self.text_ctrl_result.ChangeValue(line)

        # Detail テキストデータを表示
        data = "db/detail_" + str(index) + ".txt"
        f = open(data,'r')
        line = f.read()
        f.close()
        self.text_ctrl_detail.ChangeValue(line)

    def OnNext(self,event):
        index = self.text_ctrl_index.GetValue()
        index = int(index)+1
        num = self.text_ctrl_total.GetValue()
        num = int(num)
        if index <= num:
            self.text_ctrl_index.SetValue(str(index))
        else:
            index = int(0)
            self.text_ctrl_index.SetValue(str(0))

        # Stress
        data = "db/result_" + str(index) + ".png"
        image = wx.Image(data)
        image = image.Scale(680,480,wx.IMAGE_QUALITY_HIGH)
        bitmap = image.ConvertToBitmap()
        wx.StaticBitmap(self.panel_stress, -1, bitmap, pos=(0,0) )
        # Uplift
        data = "db/uplift_" + str(index) + ".png"
        image = wx.Image(data)
        image = image.Scale(680,480,wx.IMAGE_QUALITY_HIGH)
        bitmap = image.ConvertToBitmap()
        wx.StaticBitmap(self.panel_uplift, -1, bitmap, pos=(0,0) )

        # Summary テキストデータを表示
        data = "db/result_" + str(index) + ".txt"
        f = open(data,'r')
        line = f.read()
        f.close()
        #self.text_ctrl_result.AppendText(line)
        self.text_ctrl_result.ChangeValue(line)

        # Detail テキストデータを表示
        data = "db/detail_" + str(index) + ".txt"
        f = open(data,'r')
        line = f.read()
        f.close()
        self.text_ctrl_detail.ChangeValue(line)


    # Run Solve
    ########################################################################
    def OnExec(self, event):  # wxGlade: MyFrame.<event_handler>

        obj = rigidWink.Winkler()

        # Read Model
        ####################
        xx1 = []
        xx2 = []
        yy1 = []
        yy2 = []
        ndimx = []
        ndimy = []
        kb = []

        for i in range(0,100):
            value = self.grid_model.GetCellValue(i,0)
            if value != "":
                xx1.append(float(self.grid_model.GetCellValue(i,0)))
                xx2.append(float(self.grid_model.GetCellValue(i,1)))
                yy1.append(float(self.grid_model.GetCellValue(i,2)))
                yy2.append(float(self.grid_model.GetCellValue(i,3)))
                ndimx.append(int(self.grid_model.GetCellValue(i,4)))
                ndimy.append(int(self.grid_model.GetCellValue(i,5)))
                kb.append(float(self.grid_model.GetCellValue(i,6)))
            else:
                #print("model, break")
                break



        # Read LOAD
        ####################
        case = []
        nn = []
        mmx = []
        mmy = []
        for i in range(0,100):
            value = self.grid_load.GetCellValue(i,0)
            if value != "":
                case.append(self.grid_load.GetCellValue(i,0))
                nn.append(float(self.grid_load.GetCellValue(i,1)))
                mmx.append(float(self.grid_load.GetCellValue(i,2)))
                mmy.append(float(self.grid_load.GetCellValue(i,3)))
            else:
                #print("load, break")
                break

        # Read Comb
        ####################
        label = []
        case1 = []
        fac1  = []
        case2 = []
        fac2  = []
        case3 = []
        fac3  = []
        case4 = []
        fac4  = []
        for i in range(0,100):
            value = self.grid_comb.GetCellValue(i,0)
            if value != "":
                label.append(self.grid_comb.GetCellValue(i,0))
                case1.append(self.grid_comb.GetCellValue(i,1))
                fac1.append(self.grid_comb.GetCellValue(i,2))
                case2.append(self.grid_comb.GetCellValue(i,3))
                fac2.append(self.grid_comb.GetCellValue(i,4))
                case3.append(self.grid_comb.GetCellValue(i,5))
                fac3.append(self.grid_comb.GetCellValue(i,6))
                case4.append(self.grid_comb.GetCellValue(i,7))
                fac4.append(self.grid_comb.GetCellValue(i,8))
            else:
                #print("comb, break")
                break

        # organized analysis case
        n = []
        mx = []
        my = []

        totalNum = int(len(label))-1
        self.text_ctrl_total.SetValue(str(totalNum))

        for i in range(0,len(label)):
            n.append(0.0)
            mx.append(0.0)
            my.append(0.0)
            for j in range(0,len(case)):
                if case1[i] == case[j] and case1[i] != "":
                    fac1[i] = float(fac1[i])
                    n[i]  =  n[i] + nn[j] *fac1[i]
                    mx[i] = mx[i] + mmx[j]*fac1[i]
                    my[i] = my[i] + mmy[j]*fac1[i]
                if case2[i] == case[j] and case2[i] != "":
                    fac2[i] = float(fac2[i])
                    n[i]  = n[i]  + nn[j] *fac2[i]
                    mx[i] = mx[i] + mmx[j]*fac2[i]
                    my[i] = my[i] + mmy[j]*fac2[i]
                if case3[i] == case[j] and case3[i] != "":
                    fac3[i] = float(fac3[i])
                    n[i]  = n[i]  + nn[j] *fac3[i]
                    mx[i] = mx[i] + mmx[j]*fac3[i]
                    my[i] = my[i] + mmy[j]*fac3[i]
                if case4[i] == case[j] and case4[i] != "":
                    fac4[i] = float(fac4[i])
                    n[i]  = n[i]  + nn[j] *fac4[i]
                    mx[i] = mx[i] + mmx[j]*fac4[i]
                    my[i] = my[i] + mmy[j]*fac4[i]


        # analysis
        ########################################################################

        if obj.getModel(xx1,xx2,yy1,yy2,ndimx,ndimy,kb):
            obj.getG(xx1,xx2,yy1,yy2)
            #obj.viewModel()
            print("Complete Model Making")
            dlg = wx.MessageDialog(self, 'Complete Model Maiking',
                                   'Complete',
                                   wx.OK | wx.ICON_INFORMATION
                                   )
            dlg.ShowModal()
            dlg.Destroy()
        else:
            del obj
            obj = rigidWink.Winkler()
            print("Fail Model Making")

        for i in range(0,len(label)):
            obj.solve(label[i],i,n[i],mx[i],my[i])

        # モデルをcanvasに表示
        #print(obj.x,obj.y)
        self.matplotlib_axes.scatter(obj.x,obj.y,s=1,color="black")
        self.matplotlib_axes.spines['right'].set_visible(False)
        self.matplotlib_axes.spines['top'].set_visible(False)
        #test
        self.matplotlib_axes.set_aspect('equal')
        self.matplotlib_canvas.draw()
        event.Skip()


        """
        # 画像をパネルに表示
        # Model
        image = wx.Image('db/model.png')
        image = image.Scale(680,480,wx.IMAGE_QUALITY_HIGH)
        bitmap = image.ConvertToBitmap()
        wx.StaticBitmap(self.panel_disp, -1, bitmap, pos=(0,0) )
        """

        # Stress
        image = wx.Image('db/result_0.png')
        image = image.Scale(680,480,wx.IMAGE_QUALITY_HIGH)
        bitmap = image.ConvertToBitmap()
        wx.StaticBitmap(self.panel_stress, -1, bitmap, pos=(0,0) )
        # Uplift
        image = wx.Image('db/uplift_0.png')
        image = image.Scale(680,480,wx.IMAGE_QUALITY_HIGH)
        bitmap = image.ConvertToBitmap()
        wx.StaticBitmap(self.panel_uplift, -1, bitmap, pos=(0,0) )

        # Summary テキストデータを表示
        f = open("./db/result_0.txt",'r')
        line = f.read()
        f.close()
        #self.text_ctrl_result.AppendText(line)
        self.text_ctrl_result.ChangeValue(line)

        # Detail テキストデータを表示
        f = open("./db/detail_0.txt",'r')
        line = f.read()
        f.close()
        self.text_ctrl_detail.ChangeValue(line)



        """
        
        obj = stiff2D.Stiff2D()
        # read data
        if obj.read_data_xlsx(target_file):
            # exe. calculation
            if obj.calc_main():
                # write result
                if obj.write_result_xlsx(output_file):
                    print('Complete')
                    dlg = wx.MessageDialog(self, 'Cal End',
                                           'Complete',
                                           wx.OK | wx.ICON_INFORMATION
                                           )
                    dlg.ShowModal()
                    dlg.Destroy()
                else:
                    print("出力ファイルの書き込みエラー")
                    dlg = wx.MessageDialog(self, 'Erro output',
                                           'Error output',
                                           wx.OK | wx.ICON_ERROR
                                           )
                    dlg.ShowModal()
                    dlg.Destroy()

            else:
                print('実行時エラー : ' + obj.error)

                dlg = wx.MessageDialog(self, 'Erro' + obj.error,
                                       'Error Execution',
                                       wx.OK | wx.ICON_ERROR
                                       )
                dlg.ShowModal()
                dlg.Destroy()

        else:
            print("入力ファイルの読み込みエラー")
            dlg = wx.MessageDialog(self, 'Error read input',
                                   'Read Error',
                                   wx.OK | wx.ICON_ERROR
                                   )
            dlg.ShowModal()
            dlg.Destroy()

        """
    def OnPlot(self, event):  # wxGlade: MyFrame.<event_handler>

        # Make Model
        obj = rigidWink.Winkler()
        # Read Model
        ####################
        xx1 = []
        xx2 = []
        yy1 = []
        yy2 = []
        ndimx = []
        ndimy = []
        kb = []

        for i in range(0,100):
            value = self.grid_model.GetCellValue(i,0)
            if value != "":
                xx1.append(float(self.grid_model.GetCellValue(i,0)))
                xx2.append(float(self.grid_model.GetCellValue(i,1)))
                yy1.append(float(self.grid_model.GetCellValue(i,2)))
                yy2.append(float(self.grid_model.GetCellValue(i,3)))
                ndimx.append(int(self.grid_model.GetCellValue(i,4)))
                ndimy.append(int(self.grid_model.GetCellValue(i,5)))
                kb.append(float(self.grid_model.GetCellValue(i,6)))
            else:
                #print("model, break")
                break

        if obj.getModel(xx1,xx2,yy1,yy2,ndimx,ndimy,kb):
            obj.getG(xx1,xx2,yy1,yy2)
            obj.viewModel()
            print("Complete Model Making")
        else:
            del obj
            obj = rigidWink.Winkler()
            print("Fail Model Making")


# end of class MyFrame

class MyApp(wx.App):
    def OnInit(self):
        self.frame = MyFrame(None, wx.ID_ANY, "")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        return True

# end of class MyApp

if __name__ == "__main__":
    app = MyApp(0)
    app.MainLoop()
